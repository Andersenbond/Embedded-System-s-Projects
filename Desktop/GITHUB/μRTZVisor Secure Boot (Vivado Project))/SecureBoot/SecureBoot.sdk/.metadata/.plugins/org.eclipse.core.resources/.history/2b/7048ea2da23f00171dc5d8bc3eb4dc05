/*
 * fsbl_hash.c
 *
 *  Created on: 23/05/2017
 *      Author: jltm
 */

#include "fsbl_hash.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "image_mover.h"
#include "fsbl.h"

#include "image_mover.h"
#include "xil_printf.h"
#include "xreg_cortexa9.h"
#include "pcap.h"
#include "fsbl_hooks.h"
#include "md5.h"

extern u32 FlashReadBaseAddress;

uint k[64] = {
    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0x07990624,0xf40e3585,0x106aa070,
    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

//
// De 64 em 64 bytes, temos de fazer uma tranformação na hash para que se possa
// fazer uma hash mais completa, com todos os bytes da imagem e evitar o overflow, etc..
//
void sha256_transform(SHA256_CTX *ctx, uchar data[])
{
    uint a,b,c,d,e,f,g,h,i,j,t1,t2,m[64];

    //Para cada um dos bytes já introduzidos faz uma mácara 16*4 = 64
    for (i=0,j=0; i < 16; ++i, j += 4)
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
    for ( ; i < 64; ++i)
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i = 0; i < 64; ++i)
    {
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
        t2 = EP0(a) + MAJ(a,b,c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;
}

//
// Inicia a estrutura que vai ser usada no HASH, coloca alguns valores nos states para que ao serem chamados na primeira vez, já possuam um valor
//
void sha256_init(SHA256_CTX *ctx)
{
    ctx->datalen = 0;
    ctx->bitlen[0] = 0;
    ctx->bitlen[1] = 0;
    ctx->state[0] = 0x6a09e667;
    ctx->state[1] = 0xbb67ae85;
    ctx->state[2] = 0x3c6ef372;
    ctx->state[3] = 0xa54ff53a;
    ctx->state[4] = 0x510e507f;
    ctx->state[5] = 0x9b05688c;
    ctx->state[6] = 0x1f83d9ab;
    ctx->state[7] = 0x5be0cd19;
}

void sha256_final(SHA256_CTX *ctx, uchar hash[])
{
    uint i;

    i = ctx->datalen;

    // Pad whatever data is left in the buffer.
    if (ctx->datalen < 56) {
        ctx->data[i++] = 0x80;
        while (i < 56)
            ctx->data[i++] = 0x00;
    }
    else {
        ctx->data[i++] = 0x80;
        while (i < 64)
            ctx->data[i++] = 0x00;
        sha256_transform(ctx,ctx->data);
        memset(ctx->data,0,56);
    }

    // Append to the padding the total message's length in bits and transform.
    DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],ctx->datalen * 8);
    ctx->data[63] = ctx->bitlen[0];
    ctx->data[62] = ctx->bitlen[0] >> 8;
    ctx->data[61] = ctx->bitlen[0] >> 16;
    ctx->data[60] = ctx->bitlen[0] >> 24;
    ctx->data[59] = ctx->bitlen[1];
    ctx->data[58] = ctx->bitlen[1] >> 8;
    ctx->data[57] = ctx->bitlen[1] >> 16;
    ctx->data[56] = ctx->bitlen[1] >> 24;
    sha256_transform(ctx,ctx->data);

    // Since this implementation uses little endian byte ordering and SHA uses big endian,
    // reverse all the bytes when copying the final state to the output hash.
    for (i=0; i < 4; ++i) {
        hash[i]    = (ctx->state[0] >> (24-i*8)) & 0x000000ff;
        hash[i+4]  = (ctx->state[1] >> (24-i*8)) & 0x000000ff;
        hash[i+8]  = (ctx->state[2] >> (24-i*8)) & 0x000000ff;
        hash[i+12] = (ctx->state[3] >> (24-i*8)) & 0x000000ff;
        hash[i+16] = (ctx->state[4] >> (24-i*8)) & 0x000000ff;
        hash[i+20] = (ctx->state[5] >> (24-i*8)) & 0x000000ff;
        hash[i+24] = (ctx->state[6] >> (24-i*8)) & 0x000000ff;
        hash[i+28] = (ctx->state[7] >> (24-i*8)) & 0x000000ff;
    }
}


void initHash(s_image_hash * hash_t)
{
    //Reserves the necessary space in the memory
    for(int i = 0; i<HASH_NUMBER; i++)
        hash_t->ctx[i] = (SHA256_CTX *) malloc(sizeof(SHA256_CTX));

    //inits all the hash structures used for hash for each part of the image
    for (int i = 0; i<HASH_NUMBER; i++)
    {
        sha256_init(hash_t->ctx[i]);
    }
}

void printHashes(s_image_hash hash_t)
{
    for (int i = 0; i<HASH_NUMBER; i++)
    {
        sha256_final(hash_t.ctx[i], hash_t.cHash[i]);
        //Prints Hexadecimal format
        for (int idx=0; idx < 32; idx++)
            //printf("%02x",hash_t.cHash[i][idx]);
        	fsbl_printf(DEBUG_INFO, "%02lx", hash_t.cHash[i][idx]);
        fsbl_printf(DEBUG_INFO, "\n");
        //printf("\n");
    }

}

void HashPartition(uint PartitionNumber)
{
    int i = 0;
    int iHashCount = 1;
    uchar* read = 0;

    //u32 partSize = (Image->Headers[PartitionNumber].ImageWordLen<<WORD_LENGTH_SHIFT) / (HASH_NUMBER-1);
    u32 partSize = (PartitionHeader[PartitionNumber].ImageWordLen << WORD_LENGTH_SHIFT) / (HASH_NUMBER-1);

    s_image_hash hash;

    initHash(&hash);

    read = (uchar*) (( BASEADDR_HOLDER) + (PartitionHeader[PartitionNumber].PartitionStart<<WORD_LENGTH_SHIFT) + FlashReadBaseAddress + 8);

    //fseek(Image->fp, (Image->Headers[PartitionNumber].PartitionStart<<WORD_LENGTH_SHIFT), SEEK_SET);

    //while(i<(Image->Headers[PartitionNumber].ImageWordLen<<WORD_LENGTH_SHIFT))
    while(i<(PartitionHeader[PartitionNumber].ImageWordLen<<WORD_LENGTH_SHIFT))
    {
        //hash.ctx[iHashCount]->data[(hash.ctx[iHashCount]->datalen)&63] = hash.ctx[MASTER]->data[(hash.ctx[MASTER]->datalen)] = fgetc(Image->fp);
    	hash.ctx[iHashCount]->data[(hash.ctx[iHashCount]->datalen)&63] = hash.ctx[MASTER]->data[(hash.ctx[MASTER]->datalen)] = *read;
    	hash.ctx[MASTER]->datalen++;
        hash.ctx[iHashCount]->datalen++;

        //fsbl_printf(DEBUG_INFO, "Read: 0x%08lx \n", *read);
        read++;

        //A cada 64 bits faz a transformação para não haver problemas com oveflow e haver menos colisões
        if (!(hash.ctx[MASTER]->datalen &= 63))
        {
            //Faz a tranformação do Master
            sha256_transform(hash.ctx[MASTER],hash.ctx[MASTER]->data);
            DBL_INT_ADD(hash.ctx[MASTER]->bitlen[MASTER],hash.ctx[MASTER]->bitlen[1],512);
                    }

        if (!(hash.ctx[iHashCount]->datalen & 63))
        {
            //Faz a transformação nas sub hashes
            sha256_transform(hash.ctx[iHashCount],hash.ctx[iHashCount]->data);
            DBL_INT_ADD(hash.ctx[iHashCount]->bitlen[iHashCount],hash.ctx[iHashCount]->bitlen[1],512);

        }

        //
        // Sempre que chega a um ponto onde começa outra parte da imagem, começa a fazer o hashing da outra imagem e passa para outra estrutura
        //
        if(hash.ctx[iHashCount]->datalen == partSize && iHashCount<(HASH_NUMBER-1))
        {
            hash.ctx[iHashCount]->datalen &=63;
            iHashCount++;
        }
        i++;
    }

    // Garante que o datalen nunca vai acima de 63 quando sai desta função
    hash.ctx[iHashCount]->datalen &=63;

    printHashes(hash);
}

